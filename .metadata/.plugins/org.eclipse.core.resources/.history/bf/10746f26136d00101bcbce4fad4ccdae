package org.shark.mvc.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@RequestMapping("/b")
@Controller
public class MvcControllerB {
  
  // 요청주소: /b/list?page=1&sort=DESC
  @RequestMapping("/list")
  public String methodA(HttpServletRequest request) { // 요청 파라미터 처리를 위한 HttpServletRequest request 선언이 가능하다
       
    // sort 전달이 없거나, DESC 또는 ASC가 아니면 "DESCC" 값을 사용한다
    String sort = request.getParameter("sort");    
    if (sort == null || !(sort.equalsIgnoreCase("ASC") || sort.equalsIgnoreCase("DESC"))) {
      sort = "DESC";
    }
    
    // page 값이 정수가 아닌 경우 (전달이 안 된 경우도 포함) "1" 값을 사용
    int page = 1;
    try {
      page = Integer.parseInt(request.getParameter("page"));
    } catch (Exception e) {
      page = 1;
    }
    
    System.out.println("page : " + page);
    System.out.println("sort : " + sort);
    return "b/list";
  }
  
  // /b/detail?bid=1&code=detail&url=abc
  @RequestMapping("/detail")
  public String methodB(@RequestParam(name = "bid") int bid, // @RequestParam 어노테이션으로 요청 파라미터를 처리할 수 있다
                         @RequestParam(name = "code") String code, // name을 생략하면 요청 파라미터를 변수 이름으로 추론하여 결정한다 
                         String url) {// @RequestParam 어노테이션을 생략하면 요청 파라미터를 변수 이름으로 추론하여 결정한다
    
    // @RequestParam 사용 시 주의사항
    // 1. @RequestParam 어노테이션을 명시하는 경우 (required = true)가 디폴트 설정이므로, 파라미터를 전달하지 않으면 400 에러가 발생한다 
    // 2. @RequestParam 어노테이션을 생략하는 경우 내부적으로 required = false로 처리하여 값을 가져온다
    // 3. @RequestParam(required = false, defaultValue = "0") int bid 방식으로 처리하면, 요청 파라미터가 없는 경우 bid = 0이 된다
    
    System.out.println("bid: " + bid);
    System.out.println("code: " + code);
    System.out.println("url: " + url);
    
    
    
    return "b/detail";
  }
  
  
}
