package org.shark.di;

import org.shark.di.service.DIService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

/*
 * @Controller
 * 
 * 1. 요청(Request)을 처리하는 컨트롤러 클래스임을 나타내는 어노테이션 이다
 * 2. 클라이언트의 HTTP 요청을 받아 적절한 서비스 메소드를 호출하고, 처리결과를 뷰(view)로 전달한다
 * 3. @Component의 특수화 된 어노테이션으로 Spring Container에 자동으로 빈으로 등록된다
 * 4. 요청 매핑 처리를 위해서 @RequestMapping, @GetMapping, @PostMapping 등의 어노테이션을 함께 사용한다
 * */

/*
 * @Autowired
 * 
 * 1. 스프링에서 의존성 주입(Dependency Injection, DI)을 간편하게 처리하기 위해 사용하는 어노테이션 이다
 * 2. Spring Container에 등록된 빈(Bean) 중에서 "타입에 맞는 객체"를 자동으로 찾아서 주입한다
 * 3. required 속성 : 디폴트 true. 주입할 빈(Bean)이 없으면 애플리케이션이 동작하지 않는다. required=false로 설정하면 예외 없이 실행된다
 * 4. 타입 기준 검색
 *    1) 우선 타입을 기준으로 해당 빈을 찾는다
 *    2) 해당 타입의 빈이 1개이면 해당 빈을 주입한다
 *    3) 해당 타입의 빈이 2개 이상이면 예외 발생한다
 *      (1) 필드 이름과 동일한 이름의 빈이 있으면 해당 빈을 주입한다 (필드 주입)
 *      (2) 파라미터 이름과 동일한 이름의 빈이 있으면 해당 빈을 주입한다 (수정자, 생성자 주입)
 *      
 * 
 * 3. 의존성 주입 대상
 *    1) Field (필드)
 *    2) Setter (수정자)
 *    3) Constructor (생성자)
 * 
 * 
 * */




@Controller
public class MainController {
  
  @Autowired
  private DIService diService;
  
  @RequestMapping(value = "/")
  public String main() {
    diService.serviceMethod();
    return "main";
  }
  
}
