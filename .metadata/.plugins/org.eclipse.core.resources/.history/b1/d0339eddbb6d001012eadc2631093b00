package org.shark.mvc.controller;

import java.util.ArrayList;
import java.util.List;

import org.shark.mvc.model.dto.BoardDTO;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@RequestMapping("/c")
@Controller
public class MvcControllerC {
  
  List<BoardDTO> boards = new ArrayList<BoardDTO>();
  
  // List<BoardDTO> boards
  public MvcControllerC() {
    boards.add(new BoardDTO("제목1", 20));
    boards.add(new BoardDTO("제목2", 10));
    boards.add(new BoardDTO("제목3", 30));    
  }
  
  /*
   * org.springframework.ui.Model;
   * 
   * 1. 컨트롤러가 View(JSP)로 데이터를 전달(forward)할 때 사용하는 인터페이스
   *    Servlet의 request.setAttribute()와 유사한 역할을 수행한다
   * 2. 컨트롤러 메소드의 파라미터로 선언해서 사용한다
   * 3. key-value 형태로 데이터를 저장한다
   * 4. 주요 메소드
   *    1) addAttribute(String key, Object value)
   *    2) asMap()
   * 5. 리다이렉트 시에는 Model1에 저장한 데이터는 소멸된다
   * 
   * 
   * */
  
  
  
  // ModelAndView를 이용한 forward ( 데이터 전달)
  @RequestMapping("/list.do") // 요청 주소 : /c/list
  public ModelAndView methodA() {    
    ModelAndView mv = new ModelAndView();
    mv.setViewName("c/list");
    mv.addObject("boards", boards);
    return mv;
  }
  
  // Model을 이용한 forward (데이터 전달)
  @RequestMapping("/detail.do") // 요청 주소 :  /c/detail.do?bid=1
  public String methodB(Model model, // JSP로 전달할 데이터를 저장할 Model 
                        int bid) { // @RequestParam 생략
    model.addAttribute("board", boards.get(bid)); // JSP로 전달되는 데이터 board
    return "c/detail";    
  }
  
  /*
   *  @ModelAttribute를 이용한 forward (데이터 전달)
   *  org.springframework.web.servlet.mvc.support.RedirectAttributes
   *  
   *  1. 리다이렉트 시 데이터를 일시적으로 전달하는 데 사용하는 인터페이스
   *  2. 리다이렉트 시 Model에 저장한 데이터는 소멸되므로(새로운 요청이기 때문에) RedirectAttributes를 사용해야 한다
   *  3. 주요 메소드
   *     1) addAttribute(String key, Object value)
   *        (1) 전달할 데이터를 쿼리 스트링 (url?key=value) 형태로 넘긴다 (정보가 주소창에 노출된다)
   *        (2) 새로 고침을 하더라도 데이터가 유지 된다
   *     2) addFlashAttribute(String key, Object value)
   *        (1) 데이터를 내부적으로 세션에 임시로 저장하고 리다이렉트 이후 딱 한 번만 사용할 수 있다
   *        (2) 정보가 주소창에 노출되지 않는다
   *        (3) 주로 성공/실패 메시지, 경고 메시지 등 임시 정보를 전달할 때 사용한다
   * 
   * 
   * 
   * 
   * */
  
  
  
  // RedirectAttributes를 이용한 redirect
  @RequestMapping("/regist.do") // /c/regist?title=신규제목&hit=0
  public String methodC(RedirectAttributes rAttr 
                       ,String title
                       ,int hit) {
    // 등록
    boolean result = boards.add(new BoardDTO(title, hit));
    
    // 등록 결과에 따른 메시지
    String msg = result ? "등록 성공" : "등록 실패";
    
    // 메시지를 전달 (리다이렉트할 장소로 전달하는 경우 Flash Attribute 형태로 저장한다)
    rAttr.addFlashAttribute("msg", msg);
    
    // redirect (새로운 요청 주소로 리다이렉트 구성)
    return "redirect:/c/list.do";
  }
  
  @RequestMapping("/modify.do") // 요청 주소 : /c/modify?bid=0&title=수정제목&hit=10
  public String methodE(RedirectAttributes redirectAttrs 
                       , int bid
                       , String title
                       , int hit) {
     // 수정
    BoardDTO prevBoard = boards.set(bid, new BoardDTO(title, hit));
    redirectAttrs.addFlashAttribute("msg", "수정 성공 " + prevBoard);
    return "redirect:/c/detail.do?bid=" + bid;
  }
  
  
  
}
