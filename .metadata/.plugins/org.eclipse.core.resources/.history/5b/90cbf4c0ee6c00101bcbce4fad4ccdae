package org.shark.di.service;

import org.shark.di.dao.DIDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import lombok.AllArgsConstructor;
import lombok.RequiredArgsConstructor;

/*
 * @Service
 * 
 * 1. 비즈니스 로직을 담당하는 클래스임을 명확히 나타내는 어노테이션 이다
 * 2. 컨트롤러(@Controller)와 레파지토리(@Repository) 사이에서 핵심 비즈니스 로직을 구현하는 역할을 한다
 * 3. @Component의 특수화 된 어노테이션으로 Spring Container에 자동으로 빈으로 등록된다
 * 
 * */

/*
 * @AllArgsConstructor
 * 
 * 1. 모든 필드를 매개변수로 포함하는 생성자를 만든다
 * 2. final이 아니거나 @NonNull이 없는 필드도 모두 포함된다
 * 3. @NonNull 필드는 null 체크가 생성된다
 * 
 * @RequiredArgsConstructor
 * 
 * 1. 초기화되지 않은 final 필드와 @NonNull이 있고 초기화되지 않는 필드만 매개변수로 포함하는 생성자를 만든다
 * */




//@AllArgsConstructor
@RequiredArgsConstructor
@Service
public class DIServcieImpl implements DIService {

//  @Autowired
//  private DIDao didao;
  
  
//  private DIDao diDao;
//  
//  @Autowired
//  public void setDIDao(DIDao diDao) {
//    this.diDao = diDao;
//  }
  
  
  private DIDao diDao;


  
  
  
  @Override
  public void serviceMethod() {
    System.out.println("serviceMethod()");
    diDao.daoMethod();
    
  }

}
